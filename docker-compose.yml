name: lactose

volumes:
  # Ideally this would use the shared certs dir but it's on a local exfat drive and Traefik wants
  # the file permission set to 600, which isn't possible on exfat.
  # So instead, create a volume just for the acme file. Acme Sidecar will extract the acme file into
  # certs in the shareable certs dir.
  traefik-acme:

services:
  tunnel:
    container_name: lactose-cloudflared-tunnel
    image: cloudflare/cloudflared
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    restart: unless-stopped
    
  traefik:
    container_name: lactose-traefik
    image: traefik
    command: 
      - --providers.docker
      - --providers.docker.exposedByDefault=false
      - --entryPoints.web.address=:443
      - --certificatesResolvers.cf.acme.email=info@mookrata.ovh
      - --certificatesResolvers.cf.acme.storage=/etc/traefik/certs/acme.json
      - --certificatesResolvers.cf.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.cf.acme.dnsChallenge.propagation.delayBeforeChecks=10s
      - --global.sendAnonymousUsage=false
      - --api.insecure=true
      - --log.level=debug
      - --serversTransport.insecureSkipVerify=true # Disabling this fails because of invalid IP SAN
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/lactose-cf-dns-token
    ports:
      - "2000:443"
      - "2002:8080" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/etc/traefik/certs:rw
    secrets:
      - lactose-cf-dns-token
    depends_on:
      - tunnel
    restart: unless-stopped
    
  # Deals with converting the ACME file generated by Traefik into PEM cert files
  acme-sidecar:
    container_name: lactose-acme-sidecar
    build:
      context: ./Traefik-Acme-Converter
    image: lactose-acme-sidecar
    environment:
      - WATCH_DIR=/certs
      - OUTPUT_DIR=/certs
      - PROVIDER=cf
      - USER_UID=1001
      - USER_GID=1001
      - FLAT=true
    volumes:
      - ./data/certs:/certs:rw
      - traefik-acme:/input:ro
    restart: unless-stopped
    
  whoami:
    image: traefik/whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`lactose.mookrata.ovh`) && PathPrefix(`/wai`)
      - traefik.http.routers.whoami.tls=true
    ports:
      - "2003:80" # Keep exposed so it's easier to test whether a reverse proxy issue is happening or not.
    restart: always
  
  identity:
    container_name: lactose-identity
    image: lactose-identity:dev
    build:
      context: .
      dockerfile: LactoseIdentity/Dockerfile
    environment:
      - ASPNETCORE_Kestrel__PathBase=/identity
    labels:
      - traefik.enable=true
      - traefik.http.routers.identity.rule=(Host(`lactose.mookrata.ovh`)) && PathPrefix(`/identity`)
      #- traefik.http.routers.identity.tls=true - not necessary due to below line
      - traefik.http.routers.identity.tls.certResolver=cf # Tells Traefik to assign the TLS certificates under the CF group
      #- traefik.http.services.identity.loadBalancer.server.port=443 - not necessary due to below line
      - traefik.http.services.identity.loadBalancer.server.scheme=https # Tells Traefik to use HTTPS
    ports:
      - "2010:443" # Keep exposed so it's easier to test whether a reverse proxy issue is happening or not.
    secrets:
      - lactose-jwt-key
      - lactose-cert-fullchain
      - lactose-cert-privkey
    depends_on:
      - traefik
      - identity-db
    restart: always
      
  identity-db:
    container_name: lactose-identity-db
    image: mongo
    user: "1001"
    ports:
      - "2015:27017"
    volumes:
      - ./data/IdentityDb:/data/db
      
  config:
    container_name: lactose-config
    image: lactose-config:dev
    build:
      context: .
      dockerfile: LactoseConfig/Dockerfile
    environment:
      - ASPNETCORE_Kestrel__PathBase=/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.config.rule=Host(`lactose.mookrata.ovh`) && PathPrefix(`/config`)
      - traefik.http.routers.config.tls.certResolver=cf
      - traefik.http.services.config.loadBalancer.server.scheme=https
    secrets:
      - lactose-jwt-key
      - lactose-cert-fullchain
      - lactose-cert-privkey
    depends_on:
      - traefik
      - config-db
    restart: always
        
  config-db:
    container_name: lactose-config-db
    image: mongo
    user: "1001"
    ports:
      - "2025:27017"
    volumes:
      - ./data/ConfigDb:/data/db

  tasks:
    container_name: lactose-tasks
    image: lactose-tasks:dev
    build:
      context: .
      dockerfile: LactoseTasks/Dockerfile
    ports:
      - "2030:443"

  economy:
    container_name: lactose-economy
    image: lactose-economy:dev
    build:
      context: .
      dockerfile: LactoseEconomy/Dockerfile
    environment:
      - ASPNETCORE_Kestrel__PathBase=/economy
    labels:
      - traefik.enable=true
      - traefik.http.routers.economy.rule=Host(`lactose.mookrata.ovh`) && PathPrefix(`/economy`)
      - traefik.http.routers.economy.tls.certResolver=cf
      - traefik.http.services.economy.loadBalancer.server.scheme=https
    secrets:
      - lactose-jwt-key
      - lactose-cert-fullchain
      - lactose-cert-privkey
    depends_on:
      - economy-db
      - identity
    restart: always
    
  economy-db:
    container_name: lactose-economy-db
    image: mongo
    user: "1001"
    ports:
      - "2045:27017"
    volumes:
      - ./data/EconomyDb:/data/db

  simulation:
    container_name: lactose-simulation
    image: lactose-simulation:dev
    build:
      context: .
      dockerfile: LactoseSimulation/Dockerfile
    environment:
      - ASPNETCORE_Kestrel__PathBase=/simulation
    labels:
      - traefik.enable=true
      - traefik.http.routers.simulation.rule=Host(`lactose.mookrata.ovh`) && PathPrefix(`/simulation`)
      - traefik.http.routers.simulation.tls.certResolver=cf
      - traefik.http.services.simulation.loadBalancer.server.scheme=https
    secrets:
      - lactose-jwt-key
      - lactose-cert-fullchain
      - lactose-cert-privkey
    depends_on:
      - simulation-db
      - identity
    restart: always
    
  simulation-db:
    container_name: lactose-simulation-db
    image: mongo
    user: "1001"
    ports:
      - "2055:27017"
    volumes:
      - ./data/SimulationDb:/data/db  

secrets:
  lactose-jwt-key:
    file: ./data/secrets/jwt-key.txt
  lactose-cert-fullchain:
    file: ./data/certs/fullchain.pem
  lactose-cert-privkey:
    file: ./data/certs/privkey.pem
  lactose-cf-dns-token:
    file: ./data/secrets/cf-dns-token.txt