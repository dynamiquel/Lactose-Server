//
// This file was generated by Catalyst's C# compiler at 20/06/2025 11:47:43.
// It is recommended not to modify this file. Modify the source spec file instead.
//

namespace Lactose.Economy.Items;

public class ItemsClientOptions
{
    public required string Url { get; set; }
}

public class ItemsClient(
    HttpClient httpClient,
    ItemsClientOptions options)
{
    public async Task<Lactose.Economy.Items.QueryItemsResponse> Query(Lactose.Economy.Items.QueryItemsRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Url + "/items" + "/query"),
            Content = new ByteArrayContent(request.ToBytes()),
            Headers = { {"Content-Type", "application/json; charset=utf-8" }}
        };

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Items.QueryItemsResponse? response = Lactose.Economy.Items.QueryItemsResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'ItemsClient/Query' is null");

        return response;
    }

    public async Task<Lactose.Economy.Items.GetItemsResponse> Get(Lactose.Economy.Items.GetItemsRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Url + "/items" + "/get"),
            Content = new ByteArrayContent(request.ToBytes()),
            Headers = { {"Content-Type", "application/json; charset=utf-8" }}
        };

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Items.GetItemsResponse? response = Lactose.Economy.Items.GetItemsResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'ItemsClient/Get' is null");

        return response;
    }

    public async Task<Lactose.Economy.Items.GetItemResponse> Create(Lactose.Economy.Items.CreateItemRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Url + "/items" + "/create"),
            Content = new ByteArrayContent(request.ToBytes()),
            Headers = { {"Content-Type", "application/json; charset=utf-8" }}
        };

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Items.GetItemResponse? response = Lactose.Economy.Items.GetItemResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'ItemsClient/Create' is null");

        return response;
    }

    public async Task<Lactose.Economy.Items.GetItemResponse> Update(Lactose.Economy.Items.UpdateItemRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Url + "/items" + "/update"),
            Content = new ByteArrayContent(request.ToBytes()),
            Headers = { {"Content-Type", "application/json; charset=utf-8" }}
        };

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Items.GetItemResponse? response = Lactose.Economy.Items.GetItemResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'ItemsClient/Update' is null");

        return response;
    }

    public async Task<Lactose.Economy.Items.DeleteItemsResponse> Delete(Lactose.Economy.Items.DeleteItemsRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Url + "/items" + "/delete"),
            Content = new ByteArrayContent(request.ToBytes()),
            Headers = { {"Content-Type", "application/json; charset=utf-8" }}
        };

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Items.DeleteItemsResponse? response = Lactose.Economy.Items.DeleteItemsResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'ItemsClient/Delete' is null");

        return response;
    }
}
