//
// This file was generated by Catalyst's C# compiler at 17/05/2025 20:08:06.
// It is recommended not to modify this file. Modify the source spec file instead.
//

using System.Collections.Generic;

namespace Lactose.Economy.Items;

public record QueryItemsRequest
{

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static QueryItemsRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<QueryItemsRequest>(bytes);
    }
}

public record QueryItemsResponse
{
    public required List<string> ItemIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static QueryItemsResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<QueryItemsResponse>(bytes);
    }
}

public record GetItemsRequest
{
    public required List<string> ItemIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetItemsRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetItemsRequest>(bytes);
    }
}

public record GetItemResponse
{
    public required string Id { get; set; }

    public required string Type { get; set; }

    public required string Name { get; set; }

    public string? Description { get; set; }

    public string? GameImage { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetItemResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetItemResponse>(bytes);
    }
}

public record GetItemsResponse
{
    public required List<Lactose.Economy.Items.GetItemResponse> Items { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetItemsResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetItemsResponse>(bytes);
    }
}

public record CreateItemRequest
{
    public required string Type { get; set; }

    public required string Name { get; set; }

    public string? Description { get; set; }

    public string? GameImage { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static CreateItemRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<CreateItemRequest>(bytes);
    }
}

public record UpdateItemRequest
{
    public required string ItemId { get; set; }

    public string? Type { get; set; }

    public string? Name { get; set; }

    public string? Description { get; set; }

    public string? GameImage { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static UpdateItemRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<UpdateItemRequest>(bytes);
    }
}

public record DeleteItemsRequest
{
    public List<string>? ItemIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static DeleteItemsRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<DeleteItemsRequest>(bytes);
    }
}

public record DeleteItemsResponse
{
    public required List<string> ItemIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static DeleteItemsResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<DeleteItemsResponse>(bytes);
    }
}

public record ItemEvent
{
    public required string ItemId { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static ItemEvent? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<ItemEvent>(bytes);
    }
}
