//
// This file was generated by Catalyst's C# compiler at 20/06/2025 11:47:43.
// It is recommended not to modify this file. Modify the source spec file instead.
//

using System.Net.Http.Headers;
using System.Text;
using Microsoft.Extensions.Options;

namespace Lactose.Economy.Transactions;

public class TransactionsClientOptions
{
    public required string Url { get; set; }
}

public class TransactionsClient(
    HttpClient httpClient,
    IOptions<TransactionsClientOptions> options)
{
    public HttpClient HttpClient => httpClient;
    
    public async Task<Lactose.Economy.Transactions.QueryTransactionsResponse> Query(Lactose.Economy.Transactions.QueryTransactionsRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Value.Url + "/transactions" + "/query"),
            Content = new ByteArrayContent(request.ToBytes())
        };
        
        httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json", "utf-8");

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Transactions.QueryTransactionsResponse? response = Lactose.Economy.Transactions.QueryTransactionsResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'TransactionsClient/Query' is null");

        return response;
    }

    public async Task<Lactose.Economy.Transactions.GetTransactionResponse> Get(Lactose.Economy.Transactions.GetTransactionRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Value.Url + "/transactions" + "/get"),
            Content = new ByteArrayContent(request.ToBytes())
        };
        
        httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json", "utf-8");

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Transactions.GetTransactionResponse? response = Lactose.Economy.Transactions.GetTransactionResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'TransactionsClient/Get' is null");

        return response;
    }

    public async Task<Lactose.Economy.Transactions.TradeResponse> Trade(Lactose.Economy.Transactions.TradeRequest request)
    {
        HttpRequestMessage httpRequest = new()
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(options.Value.Url + "/transactions" + "/trade"),
            Content = new ByteArrayContent(request.ToBytes())
        };
        
        httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json", "utf-8");

        HttpResponseMessage httpResponse = await httpClient.SendAsync(httpRequest).ConfigureAwait(false);
        httpResponse.EnsureSuccessStatusCode();

        byte[] responseBytes = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
        Lactose.Economy.Transactions.TradeResponse? response = Lactose.Economy.Transactions.TradeResponse.FromBytes(responseBytes);

        if (response is null)
            throw new NullReferenceException("Response of 'TransactionsClient/Trade' is null");

        return response;
    }
}
