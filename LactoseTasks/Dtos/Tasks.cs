//
// This file was generated by Catalyst's C# compiler at 02/05/2025 17:35:49.
// It is recommended not to modify this file. Modify the source spec file instead.
//

using System.Collections.Generic;

namespace Lactose.Tasks;

public record ItemRewardDto
{
    public required string ItemId { get; set; }

    public required int Quantity { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static ItemRewardDto? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<ItemRewardDto>(bytes);
    }
}

public record TriggerDto
{
    /// <summary>
    /// The MQTT topic to subscribe to.
    /// </summary>
    public required string Topic { get; set; }

    /// <summary>
    /// The name of the C# Handler class to use to handle the event.
    /// </summary>
    public string Handler { get; set; } = "default";

    /// <summary>
    /// The config object to provide to the specified C# Handler class.
    /// Can be any valid JSON structure.
    /// </summary>
    public object? Config { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static TriggerDto? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<TriggerDto>(bytes);
    }
}

public record QueryTasksRequest
{

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static QueryTasksRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<QueryTasksRequest>(bytes);
    }
}

public record QueryTasksResponse
{
    public required List<string> TaskIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static QueryTasksResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<QueryTasksResponse>(bytes);
    }
}

public record GetTasksRequest
{
    public required List<string> TaskIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetTasksRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetTasksRequest>(bytes);
    }
}

public record GetTaskResponse
{
    public required string Id { get; set; }

    public required string Name { get; set; }

    public string? Description { get; set; }

    public required double RequiredProgress { get; set; }

    public required List<Lactose.Tasks.ItemRewardDto> Rewards { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetTaskResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetTaskResponse>(bytes);
    }
}

public record GetTasksResponse
{
    public required List<Lactose.Tasks.GetTaskResponse> Tasks { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static GetTasksResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<GetTasksResponse>(bytes);
    }
}

public record CreateTaskRequest
{
    public required string Name { get; set; }

    public string? Description { get; set; }

    public required double RequiredProgress { get; set; }

    public required List<Lactose.Tasks.TriggerDto> Triggers { get; set; }

    public List<Lactose.Tasks.ItemRewardDto>? Rewards { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static CreateTaskRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<CreateTaskRequest>(bytes);
    }
}

public record UpdateTaskRequest
{
    public required string Id { get; set; }

    public string? Name { get; set; }

    public string? Description { get; set; }

    public double? RequiredProgress { get; set; }

    public List<Lactose.Tasks.TriggerDto>? Triggers { get; set; }

    public List<Lactose.Tasks.ItemRewardDto>? Rewards { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static UpdateTaskRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<UpdateTaskRequest>(bytes);
    }
}

public record DeleteTasksRequest
{
    public List<string>? TaskIds { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static DeleteTasksRequest? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<DeleteTasksRequest>(bytes);
    }
}

public record DeleteTasksResponse
{
    public List<string> DeletedTaskIds { get; set; } = [];

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static DeleteTasksResponse? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<DeleteTasksResponse>(bytes);
    }
}

public record TaskEvent
{
    public required string TaskId { get; set; }

    public byte[] ToBytes()
    {
        return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(this);
    }

    public static TaskEvent? FromBytes(ReadOnlySpan<byte> bytes)
    {
        return System.Text.Json.JsonSerializer.Deserialize<TaskEvent>(bytes);
    }
}
